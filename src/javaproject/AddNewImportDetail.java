/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package javaproject;

import java.awt.Color;
import java.awt.Component;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.time.LocalDate;
import java.time.format.DateTimeParseException;
import javax.swing.DefaultListCellRenderer;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;

/**
 *
 * @author 84338
 */
public class AddNewImportDetail extends javax.swing.JFrame {

    public AddNewImportDetail() {
        initComponents();
        try {
            UIManager.setLookAndFeel("com.sun.java.swing.plaf.windows.WindowsLookAndFeel");
        } catch (Exception e) {
            e.printStackTrace();
        }
        populateCreateCategoriesComboBox();
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Quantity = new javaproject.ImportTextField();
        ImportDate = new javaproject.ImportTextField();
        ImportIdComboBox = new javax.swing.JComboBox<>();
        LabelCategoryName = new javax.swing.JLabel();
        SaveBtn = new javax.swing.JButton();
        Expiry = new javaproject.ImportTextField();
        ImportDetailID = new javaproject.ImportTextField();
        jLabel1 = new javax.swing.JLabel();
        CategoryNameComboBox = new javax.swing.JComboBox<>();
        ProductNameComboBox = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        Quantity.setLabelText("Quantity Product");

        ImportDate.setLabelText("Import Date");
        ImportDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ImportDateActionPerformed(evt);
            }
        });

        ImportIdComboBox.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        ImportIdComboBox.setForeground(new java.awt.Color(0, 0, 0));
        ImportIdComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        ImportIdComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ImportIdComboBoxActionPerformed(evt);
            }
        });

        LabelCategoryName.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        LabelCategoryName.setText("Categories Name :");

        SaveBtn.setText("Create Import Detail");
        SaveBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveBtnActionPerformed(evt);
            }
        });

        Expiry.setLabelText("Expiry");
        Expiry.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExpiryActionPerformed(evt);
            }
        });

        ImportDetailID.setLabelText("Import Detail ID");

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel1.setText("Import ID  :");

        CategoryNameComboBox.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        CategoryNameComboBox.setForeground(new java.awt.Color(0, 0, 0));
        CategoryNameComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        CategoryNameComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CategoryNameComboBoxActionPerformed(evt);
            }
        });

        ProductNameComboBox.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        ProductNameComboBox.setForeground(new java.awt.Color(0, 0, 0));
        ProductNameComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        ProductNameComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ProductNameComboBoxActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel2.setText("Import Product :");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(ImportDate, javax.swing.GroupLayout.PREFERRED_SIZE, 390, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(Expiry, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(Quantity, javax.swing.GroupLayout.PREFERRED_SIZE, 390, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(ImportDetailID, javax.swing.GroupLayout.PREFERRED_SIZE, 390, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addComponent(LabelCategoryName)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(CategoryNameComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel2)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(ProductNameComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(66, 66, 66)
                                    .addComponent(ImportIdComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(162, 162, 162)
                        .addComponent(SaveBtn)))
                .addContainerGap(49, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(ImportDetailID, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(LabelCategoryName, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(CategoryNameComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ImportIdComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ProductNameComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE)
                .addComponent(Expiry, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(ImportDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addComponent(Quantity, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(SaveBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(57, 57, 57))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ImportDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ImportDateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ImportDateActionPerformed

    private void ImportIdComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ImportIdComboBoxActionPerformed

    }//GEN-LAST:event_ImportIdComboBoxActionPerformed

    private void SaveBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveBtnActionPerformed
        String importID = ImportIdComboBox.getSelectedItem().toString();
        String categoryName = ImportIdComboBox.getSelectedItem().toString();
        String expiry = Expiry.getText();
        String importDetailID = ImportDetailID.getText();
        String importDate = ImportDate.getText();
        String quantity = Quantity.getText();
        String ProductName = ProductNameComboBox.getSelectedItem().toString();
        ResultSet rs = null;
        int productID = 0;
        Connection conn = MainConnection.getConnection();
        Statement stmt = null;
        if (!importID.isEmpty() && !categoryName.isEmpty() && !expiry.isEmpty() && !importDetailID.isEmpty()
                && !importDate.isEmpty() && !quantity.isEmpty()) {
            if (quantity.matches("\\d+") && Integer.parseInt(quantity) > 0) {
                if (expiry.matches("\\d{4}-\\d{2}-\\d{2}") || importDate.matches("\\d{4}-\\d{2}-\\d{2}")) {
                    try {
                        LocalDate.parse(expiry);
                        LocalDate.parse(importDate);
                    } catch (DateTimeParseException e) {
                        JOptionPane.showMessageDialog(null, "date is not valid  !");
                        return; // Hoặc thực hiện các xử lý khác tùy theo logic của bạn
                    }
                    //addData
                    try {
                        stmt = conn.createStatement();
                        String selectSql = "SELECT Product_ID FROM Products WHERE Product_name = '" + ProductName + "'";
                        rs = stmt.executeQuery(selectSql);
                        if (rs.next()) {
                            productID = rs.getInt("Product_ID");
                            System.out.println("Product_ID: " + productID);
                        }
                        System.out.println(categoryName);
                        System.out.println(productID);
                        String sql = "UPDATE Import_Product\n"
                                + "SET Categories_name = '" + categoryName + "' \n"
                                + "WHERE Import_ID IN (SELECT Import_ID FROM Import_Product_Detail WHERE Import_Product_Detail_ID = '" + importDetailID + "')";
                        stmt.executeUpdate(sql);
                        // Import_Product_Detail_ID không tồn tại, thực hiện thêm mới dữ liệu
                        String insertSql = "INSERT INTO Import_Product_Detail (Import_Product_Detail_ID, Import_ID, Product_ID, Import_Quantity_Product, ImportDate) "
                                + "VALUES ('" + importDetailID + "', '" + importID + "', " + productID + ", " + quantity + ", '" + importDate + "')";
                        int rowsInserted = stmt.executeUpdate(insertSql);
                        if (rowsInserted > 0) {
                            JOptionPane.showMessageDialog(null, "The new data has been added successfully.");
                        } else {
                            JOptionPane.showMessageDialog(null, "No new data has been added.");
                        }

                    } catch (SQLException e) {
                        e.printStackTrace();
                    } finally {
                        // Đóng tất cả các đối tượng Statement và Connection
                        try {
                            if (stmt != null) {
                                stmt.close();
                            }
                            if (conn != null) {
                                conn.close();
                            }
                        } catch (SQLException e) {
                            e.printStackTrace();
                        }
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "sus !");
                }
            } else {
                // Hiển thị thông báo lỗi về giá trị không hợp lệ của quantity
                JOptionPane.showMessageDialog(null, "quantity must be a positive integer !");
            }
        } else {
            JOptionPane.showMessageDialog(null, "Content must not be blank !");
        }
    }//GEN-LAST:event_SaveBtnActionPerformed

    private void ExpiryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExpiryActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ExpiryActionPerformed

    private void CategoryNameComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CategoryNameComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CategoryNameComboBoxActionPerformed

    private void ProductNameComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ProductNameComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ProductNameComboBoxActionPerformed

    public void populateCreateCategoriesComboBox() {
        Connection conn = null;
        Statement stmt = null;
        ResultSet rs = null;
        try {
            conn = MainConnection.getConnection();
            stmt = conn.createStatement();
            String sql = "SELECT Category_name FROM GoodsCategories";
            rs = stmt.executeQuery(sql);
            // Clear the combo box
            CategoryNameComboBox.removeAllItems();
            // Add each category to the combo box
            while (rs.next()) {
                String categoryName = rs.getString("Category_name");
                CategoryNameComboBox.addItem(categoryName);
            }
            sql = "SELECT Import_ID FROM Import_Product";
            rs = stmt.executeQuery(sql);
            // Clear the combo box
            ImportIdComboBox.removeAllItems();
            // Add each category to the combo box
            while (rs.next()) {
                String Import_ID = rs.getString("Import_ID");
                ImportIdComboBox.addItem(Import_ID);
            }
            sql = "SELECT Product_name FROM Products";
            rs = stmt.executeQuery(sql);
            // Clear the combo box
            ProductNameComboBox.removeAllItems();
            // Add each category to the combo box
            while (rs.next()) {
                String Product_name = rs.getString("Product_name");
                ProductNameComboBox.addItem(Product_name);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            // Close all Statement, ResultSet, and Connection objects
            try {
                if (rs != null) {
                    rs.close();
                }
                if (stmt != null) {
                    stmt.close();
                }
                if (conn != null) {
                    conn.close();
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
        ImportIdComboBox.setRenderer(new DefaultListCellRenderer() {
            @Override
            public Component getListCellRendererComponent(JList<?> list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
                Component component = super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);
                if (isSelected) {
                    component.setFont(new Font("Arial", Font.BOLD, 14));
                } else {
                    component.setBackground(Color.WHITE); // Đặt màu nền mặc định cho các mục khác
                }
                return component;
            }
        });
    }

    public static void main(String args[]) {
        SwingUtilities.invokeLater(new Runnable() {
            public void run() {
                new AddNewImportDetail().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> CategoryNameComboBox;
    private javaproject.ImportTextField Expiry;
    private javaproject.ImportTextField ImportDate;
    private javaproject.ImportTextField ImportDetailID;
    private javax.swing.JComboBox<String> ImportIdComboBox;
    private javax.swing.JLabel LabelCategoryName;
    private javax.swing.JComboBox<String> ProductNameComboBox;
    private javaproject.ImportTextField Quantity;
    public javax.swing.JButton SaveBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    // End of variables declaration//GEN-END:variables

    void NewImportIdComboBoxActionPerformed(ActionEvent evt) {
    }
}
